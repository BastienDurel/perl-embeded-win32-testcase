//---------------------------------------------------------------------------

#pragma hdrstop


#include <EXTERN.h> /* from the Perl distribution */
#include <perl.h> /* from the Perl distribution */

#include "perlapi.h"
//---------------------------------------------------------------------------

#define GET_PERL_INTERPRETER PerlInterpreter* my_perl=(PerlInterpreter*)pinterp

EXTERN_C void xs_init (pTHX);

#if defined WIN32
EXTERN_C void boot_DynaLoader (pTHX_ CV* cv);   
EXTERN_C void boot_Win32CORE (pTHX_ CV* cv);

EXTERN_C void
xs_init(pTHX)
{
	char *file = __FILE__;
	dXSUB_SYS;

	/* DynaLoader is a special case */
	newXS("DynaLoader::boot_DynaLoader", boot_DynaLoader, file);  
	newXS("Win32CORE::bootstrap", boot_Win32CORE, file);
}
#else
// xs_init is to be defined in an autogenerated xs_init.cpp

EXTERN_C void xs_init (pTHX);

EXTERN_C void boot_DynaLoader (pTHX_ CV* cv);

EXTERN_C void
xs_init(pTHX)
{
	char *file = __FILE__;
	dXSUB_SYS;

	/* DynaLoader is a special case */
	newXS("DynaLoader::boot_DynaLoader", boot_DynaLoader, file);
}

// defining _environ
extern char **environ;
char **_environ=environ;
#endif

static char *sEmbedding[]={ (char*)"", (char*)"", (char*)"", (char*)"", (char*)"-e", (char*)"0", 0 };

//---------------------------------------------------------------------------
void PerlAPI::perl_init()
{                    
	mGlobPlInit=true;
  PerlAPI::perl_init_compat();  
  sEmbedding[1]=(char*)mPerl5Site;
  sEmbedding[2]=(char*)mPerl5Vendor;
  sEmbedding[3]=(char*)mPerl5Lib;
  PERL_SYS_INIT3(&_argc,&_argv,&_environ);
}

//---------------------------------------------------------------------------
PerlAPI::PerlAPI()
{
  if (!mGlobPlInit) PerlAPI::perl_init();
  pinterp=perl_alloc();

  GET_PERL_INTERPRETER;
	PERL_SET_CONTEXT(my_perl);

  PL_perl_destruct_level = 1;
  mError = 0;
	perl_construct(my_perl);
  perl_parse(my_perl, xs_init, (sizeof(sEmbedding) / sizeof(char*)) - 1, sEmbedding, 0);
  perl_run(my_perl);
}

//---------------------------------------------------------------------------
PerlAPI::PerlAPI(const char* aFile)
{ 
  if (!mGlobPlInit) PerlAPI::perl_init();         
  pinterp=perl_alloc();
	GET_PERL_INTERPRETER;
	PERL_SET_CONTEXT(my_perl);
	char* args[]={(char*)"datatest",(char*)mPerl5Site,(char*)mPerl5Vendor,(char*)mPerl5Lib,(char*)aFile,0};
	PL_perl_destruct_level = 1;
  mError = 0;
  perl_construct(my_perl);
  perl_parse(my_perl, xs_init, (sizeof(args) / sizeof(char*)) - 1, args, 0);
  // no perl_run
}

//---------------------------------------------------------------------------
PerlAPI::~PerlAPI()
{
  //CallCallbacks();
    
  GET_PERL_INTERPRETER;
	PERL_SET_CONTEXT(my_perl);
	perl_destruct(my_perl);
  perl_free(my_perl);
}

//---------------------------------------------------------------------------
bool PerlAPI::Connect(const char* dsn, const char* user, const char* pwd)
{
  GET_PERL_INTERPRETER;
	PERL_SET_CONTEXT(my_perl);

  dSP ;
  int count, ret;

  ENTER ;
  SAVETMPS;

  PUSHMARK(SP) ;
  XPUSHs(sv_2mortal(newSVpv(dsn, 0)));
  XPUSHs(sv_2mortal(newSVpv(user, 0)));
  XPUSHs(sv_2mortal(newSVpv(pwd, 0)));
  PUTBACK ;

  GV* perrb=PL_errgv;

  count = perl_call_pv("Data::testcase::connect", G_SCALAR|G_EVAL|G_KEEPERR);

  SPAGAIN ;

  GV* perr=PL_errgv;
  SV* err=0;
  err=ERRSV;
  //SV* err=ERRSV;
  if (SvTRUE(err))
  {       
    mError=strdup(SvPV(ERRSV, PL_na));
    //ReportError("Error in Data::test::connect: %s", mError.c_str());
    ret = -1;
    POPs ;
  }
  else
  {
    ret = POPi;
    //mClosures.push_back(&PerlAPI::Disconnect);
  }

  PUTBACK ;
  FREETMPS ;
  LEAVE ;
  
  return ret != -1;
}

#define TOTDebugInitFunc() 
#define TOTDebug(x)
#define TOTDebugError(x)
#define TOTDebugInfo(x)

#pragma package(smart_init)
